package com.inhelp.view.mainimport android.Manifestimport android.graphics.Colorimport android.os.Bundleimport android.view.WindowManagerimport androidx.core.view.ViewCompatimport androidx.core.view.isVisibleimport androidx.core.view.updatePaddingimport androidx.recyclerview.widget.RecyclerViewimport backimport clearAllFragmentsimport com.eazypermissions.common.model.PermissionResultimport com.eazypermissions.dsl.PermissionManagerimport com.inhelp.Rimport com.inhelp.base.mvp.BaseMvpActivityimport com.inhelp.base.mvp.BaseMvpViewimport com.inhelp.dialogs.main.DialogManagerimport com.inhelp.extension.getColorFromAttrimport com.inhelp.view.customView.SpanningLinearLayoutManagerimport com.inhelp.view.main.main.FragmentMainimport data.Menuimport kotlinx.android.synthetic.main.activity_main.*import org.koin.android.ext.android.getKoinimport org.koin.android.ext.android.injectimport org.koin.core.qualifier.namedimport replaceimport java.lang.ref.WeakReferenceclass MainActivity : BaseMvpActivity<MainView, MainPresenter>(), MainView {    override val presenter: MainPresenter by lazy {        val scope = getKoin().getOrCreateScope(                "app", named("app"))        scope.get()    }    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        DialogManager.init(context = WeakReference(this))        setContentView(R.layout.activity_main)        supportFragmentManager.replace(fragment = FragmentMain(), addToBackStack = true)        btnBack.setOnClickListener {            onBackPressed()        }    }    override fun setupBottomMenu(menu: MutableList<Menu>) {        bottomMenu.isVisible = menu.isNotEmpty()        if(menu.isEmpty()){            window.navigationBarColor = getCurrentContext().getColorFromAttr(R.attr.color_1)        }else{            window.navigationBarColor = getCurrentContext().getColorFromAttr(R.attr.color_2)            bottomMenu.layoutManager = SpanningLinearLayoutManager(getCurrentContext(), RecyclerView.HORIZONTAL, false)            bottomMenu.adapter = BottomMenuRvAdapter(menu = menu)        }    }    override fun setVisibleBack(isVisible: Boolean) {        btnBack.isVisible = isVisible    }    override fun setTitle(title: String) {        txtTitle.text = title    }    override fun backPress() : Boolean {        val backInFragment = (supportFragmentManager.fragments.lastOrNull() as? BaseMvpView)?.backPress() ?: false        if( !backInFragment && !supportFragmentManager.back()){            finishApplication()        }        return true    }    override fun updateBottomMenu() {        bottomMenu.adapter?.notifyDataSetChanged()    }    override fun onBackPressed() {        backPress()    }    override fun backToMain() {        supportFragmentManager.clearAllFragments()        supportFragmentManager.replace(fragment = FragmentMain(), addToBackStack = true)    }    override fun onResume() {        super.onResume()    }    override fun finishApplication() {        finish()    }    override fun onDestroy() {        super.onDestroy()        getKoin().getScopeOrNull("app")?.close()    }}